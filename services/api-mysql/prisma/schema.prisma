// Prisma schema for MySQL
// Based on DB_SALES database schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========= TABLA DE CLIENTES =========
model Cliente {
  id         Int      @id @default(autoincrement())
  nombre     String   @db.VarChar(120)
  correo     String?  @db.VarChar(150)
  genero     Genero   @default(M)
  pais       String   @db.VarChar(60)
  created_at String   @db.VarChar(10) // YYYY-MM-DD

  // Relaciones
  ordenes    Orden[]

  @@map("Cliente")
}

// ENUM para género
enum Genero {
  M
  F
  X
}

// ========= TABLA DE PRODUCTOS =========
model Producto {
  id         Int      @id @default(autoincrement())
  codigo_alt String   @unique @db.VarChar(64)
  nombre     String   @db.VarChar(150)
  categoria  String   @db.VarChar(80)

  // Relaciones
  ordenDetalles  OrdenDetalle[]

  @@map("Producto")
}

// ========= TABLA DE ÓRDENES =========
model Orden {
  id         Int      @id @default(autoincrement())
  cliente_id Int
  fecha      String   @db.VarChar(19) // YYYY-MM-DD HH:MM:SS
  canal      String   @db.VarChar(20)
  moneda     String   @db.Char(3) // USD o CRC
  total      String   @db.VarChar(20)

  // Relaciones
  cliente    Cliente  @relation(fields: [cliente_id], references: [id])
  detalles   OrdenDetalle[]

  @@index([cliente_id], name: "IX_Orden_cliente")
  @@map("Orden")
}

// ENUM para moneda (validación en TypeScript)
enum Moneda {
  USD
  CRC
}

// ========= TABLA DE DETALLE DE ÓRDENES =========
model OrdenDetalle {
  id          Int      @id @default(autoincrement())
  orden_id    Int
  producto_id Int
  cantidad    Int
  precio_unit String   @db.VarChar(20)

  // Relaciones
  orden       Orden    @relation(fields: [orden_id], references: [id])
  producto    Producto @relation(fields: [producto_id], references: [id])

  @@index([producto_id], name: "IX_Detalle_producto")
  @@map("OrdenDetalle")
}
